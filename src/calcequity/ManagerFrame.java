/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package calcequity;

import guiComp.FButton;
import java.awt.Button;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.GroupLayout;
import javax.swing.JPanel;
import sitEquity.EquityServer;

/**
 *
 * @author Michael
 */
public class ManagerFrame extends javax.swing.JFrame implements ActionListener {
     private SitPanel s1;
     private SitPanel s2;
     private SitPanel s3;
     private SitPanel s4;
     
     private JPanel butPanel;
     private FButton evalBut;
     private FButton base1But;
     private FButton base2But;
     private FButton sacBut;
     private FButton sbBut;
     
     
    /**
     * Creates new form ManagerFrame
     */
    public ManagerFrame() {
       
        initComponents();
        myInitComponents();
        setTitle("PocketManager       V0.2");
        
        setVisible(true);
    }
    private void myInitComponents(){
        s1 = new SitPanel("Initial Situation");
        s1.setEnabled(true);
        s1.setVisible(true);
        s2 = new SitPanel("Adjusted Situation");
        s2.setVisible(false);
        s2.setEnabled(false);
        s3 = new SitPanel("Successful Situation");
        s3.setVisible(false);
        s3.setEnabled(false);
        s4 = new SitPanel("Unsuccessful Situation");
        s4.setVisible(false);
        s4.setEnabled(false);
        
        s1.getOut1().addActionListener(this);
        s1.getOut2().addActionListener(this);
        
        butPanel = new JPanel();
        evalBut = new FButton("Eval");
        evalBut.addActionListener(this);
        base1But = new FButton("1B");
        base1But.addActionListener(this);
        base1But.setVisible(false);
        base2But = new FButton("2B");
        base2But.addActionListener(this);
        base2But.setVisible(false);
        sacBut = new FButton("Sac");
        sacBut.addActionListener(this);
        sacBut.setVisible(false);
        sbBut = new FButton ("SB");
        sbBut.addActionListener(this);
        sbBut.setVisible(false);
        
        GroupLayout gb = new GroupLayout(butPanel);
        butPanel.setLayout(gb);
        gb.setAutoCreateGaps(true);
        gb.setAutoCreateContainerGaps(true);
        
        gb.setHorizontalGroup(
                gb.createParallelGroup()
                  .addGroup(gb.createParallelGroup(GroupLayout.Alignment.LEADING)      
                   .addComponent(base1But)
                   .addComponent(base2But)
                   .addComponent(sacBut)
                   .addComponent(sbBut)
                   .addComponent(evalBut))
                
        );
        gb.setVerticalGroup(
                gb.createSequentialGroup()
                 
                   .addComponent(base1But)
                   .addComponent(base2But)
                   .addComponent(sacBut)
                   .addComponent(sbBut)
                   .addComponent(evalBut)
                
        );
        GroupLayout gl = new GroupLayout(scenarioPanel);
        scenarioPanel.setLayout(gl);
        
        gl.setAutoCreateGaps(true);
        gl.setAutoCreateContainerGaps(true);
        
        gl.setHorizontalGroup(
             gl.createSequentialGroup()   
                .addGroup(gl.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(s1)
                        .addComponent(s3))
                .addComponent(butPanel)
                .addGroup(gl.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(s2)
                        .addComponent(s4))
        );
        
        gl.setVerticalGroup(
            gl.createSequentialGroup()
                    .addGroup(gl.createParallelGroup(GroupLayout.Alignment.BASELINE)
                       
                    .addComponent(s1)
                    .addComponent(butPanel)    
                    .addComponent(s2))   
             .addGroup(gl.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(s3)
                        .addComponent(s4))            
        );
        
        
        
   
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        analysisBox = new javax.swing.JTextArea();
        scenarioPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(527, 600));

        analysisBox.setColumns(20);
        analysisBox.setRows(5);
        jScrollPane1.setViewportView(analysisBox);

        javax.swing.GroupLayout scenarioPanelLayout = new javax.swing.GroupLayout(scenarioPanel);
        scenarioPanel.setLayout(scenarioPanelLayout);
        scenarioPanelLayout.setHorizontalGroup(
            scenarioPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        scenarioPanelLayout.setVerticalGroup(
            scenarioPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 432, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scenarioPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 527, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(scenarioPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManagerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManagerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManagerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManagerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManagerFrame().setVisible(true);
            }
        });
    }
public void actionPerformed(ActionEvent e) {
 
 if (e.getSource() == evalBut) {
     processEval();
 }
 else if (e.getSource() == base1But) {
     processBase1();
    
 }
 else if (e.getSource() == base2But) {
     processBase2();
    
 }
 else if (e.getSource() == sacBut) {
     processSac();
    
 }
 else if (e.getSource() == sbBut) {
     processSb();
    
 }
 else if (e.getSource() == sacBut) {
     processSac();
    
 } 
 else if (e.getSource() == s1.getOut1()) {
     processOut1();
    
 } 
 else if (e.getSource() == s1.getOut2()) {
     processOut2();
    
 } 
}
private void processEval() {
    evalBut.setText("Eval");
    analysisBox.setText("");
    s2.setVisible(false);
    s3.setVisible(false);
    s4.setVisible(false);
    
    s1.setEquity();
    base1But.setVisible(true);
    base2But.setVisible(true);
    sacBut.setVisible(true);
    sbBut.setVisible(true);
    
    int tSit = s1.getSit();
    int temp = tSit / 1000;
    
    if (temp % 3 > 1 || tSit % 10 == 0)
        sacBut.setEnabled(false);
    else
        sacBut.setEnabled(true);
    
   
    
    if (tSit % 10 == 0)
        sbBut.setEnabled(false);
    else
        sbBut.setEnabled(true);
   
}

private void processBase1() {
 evalBut.setText("Reset");
 int sit = s1.getSit();
     int hs = s1.getHomeScore();
    
     int runners = sit % 10;
       
     int newSit = sit + 1 + runners;
     if (runners >3 ) {
         newSit +=  2;
         if (!s1.isTopofInning()) 
             hs++;
     }
     
     
     s2.setSit(newSit, hs);
     s2.setVisible(true);
     
     int succSit = succAdvance(newSit, hs);
     int unsuccSit = unsuccAdvance(newSit, hs);
     
     double basePer = EquityServer.getScore(newSit);
     double succPer = EquityServer.getDiff(newSit,succSit);
     double unsPer = EquityServer.getDiff(newSit, unsuccSit);
     if (s2.isTopofInning()) {
         basePer = 1- basePer;
         succPer = -succPer;}
     else
         unsPer = -unsPer;
      
     double threshold = unsPer / (succPer+unsPer);
     String bp = String.format("%.2f", 100*basePer);
     String sp = String.format("%.2f", 100*succPer);
     String up = String.format("%.2f", 100*unsPer);
     
     String tp = String.format("%.2f",  100*threshold);
     
     String analy = "After single the team at bat has a winning percentage of "+bp +"%\n";
     analy += "Taking an extra base increases win percentage by " + sp +"%"+'\n';
     analy += "Getting thrown out reduces win percentage by " + up+ "%"+'\n';
     analy += "Taking the extra base makes sense if you are successful more than "+ tp+"%";
     
     analysisBox.setText(analy);
     
     
  }

private void processBase2() {
 evalBut.setText("Reset");
 int newSit = s1.getSit();
     int hs = s1.getHomeScore();
    
     int runners = newSit % 10;
       
     if (runners == 0 ) 
         newSit +=  2;
     else if (runners == 1)
         newSit +=5;
     else if (runners == 2) {
         if (!s1.isTopofInning()) 
             hs++;
         newSit +=10;
     }
     else if (runners == 3) {
         if (!s1.isTopofInning()) 
             hs++;
         newSit +=13;
     }
     else if (runners == 4) {
         if (!s1.isTopofInning()) 
             hs++;
         newSit +=8;
     }
     else if (runners == 5) {
         if (!s1.isTopofInning()) 
             hs++;
         newSit +=11;
     }
     else if (runners == 6) {
         if (!s1.isTopofInning()) 
             hs+=2;
         newSit +=16;
     }
     else if (runners == 7) {
         if (!s1.isTopofInning()) 
             hs+=2;
         newSit +=19;
     }
     
     
     s2.setSit(newSit, hs);
     s2.setVisible(true);
     
     int succSit = succAdvance(newSit, hs);
     int unsuccSit = unsuccAdvance(newSit, hs);
     
     double basePer = EquityServer.getScore(newSit);
     double succPer = EquityServer.getDiff(newSit,succSit);
     double unsPer = EquityServer.getDiff(newSit, unsuccSit);
     if (s2.isTopofInning()) {
         basePer = 1- basePer;
         succPer = -succPer;}
     else
         unsPer = -unsPer;
      
     double threshold = unsPer / (succPer+unsPer);
     String bp = String.format("%.2f", 100*basePer);
     String sp = String.format("%.2f", 100*succPer);
     String up = String.format("%.2f", 100*unsPer);
     
     String tp = String.format("%.2f",  100*threshold);
     
     String analy = "After double the team at bat has a winning percentage of "+bp +"%\n";
     analy += "Taking an extra base increases win percentage by " + sp +"%"+'\n';
     analy += "Getting thrown out reduces win percentage by " + up+ "%"+'\n';
     analy += "Taking the extra base makes sense if you are successful more than "+ tp+"%";
     
     analysisBox.setText(analy);
     
     
  }

public void processSac() {
    evalBut.setText("Reset");
    int newSit = s1.getSit();
    int runners = newSit % 10;
    int hs = s1.getHomeScore();
    newSit += 1000;
    if (runners == 1)
         newSit +=1;
     else if (runners == 2) 
         newSit +=2;
     
     else if (runners == 3) 
         newSit +=3;
    
     else if (runners == 4) {
         if (!s1.isTopofInning()) 
             hs++;
         newSit +=6;
     }
     else if (runners == 5) {
         if (!s1.isTopofInning()) 
             hs++;
         newSit +=7;
     }
     else if (runners == 6) {
         if (!s1.isTopofInning()) 
             hs++;
         newSit +=8;
     }
     else if (runners == 7) {
         if (!s1.isTopofInning()) 
             hs++;
         newSit +=9;
     }
    s3.setSit(newSit, hs);
    s3.setVisible(true);
    
    double eq = EquityServer.getDiff(s1.getSit(), newSit);
    if (s1.isTopofInning())
        eq = -eq;
    
    String analy = "";
    if (eq > 0) {
        analy = "A successful sacrifice increases the batting team's winning percentage by "
                +String.format("%.2f",  100*eq) ;
       
    }
    else {
        analy = "This is not a good situation for a sacrifice. Sacrificing the runner(s) \n"+
                "forward here actually reduces the batting teams win percentage by " +String.format("%.2f",  -100*eq)+"%" ;
    }
     analysisBox.setText(analy);
}

public void processSb() {
    evalBut.setText("Reset");
    int sit = s1.getSit();
    int hs = s1.getHomeScore();
    int runners = sit % 10;
    int succSit = sit + runners;
    if (runners >3) {
        succSit+=2;
        if (!s1.isTopofInning())
            hs++;
    }
    s3.setSit(succSit, hs);
    
    int outs = sit / 1000;
    int unsuccSit = sit + 1000;
    if (outs % 3 == 2) {
        unsuccSit -= runners;
        int rDiff = (unsuccSit % 1000) - 500;
        unsuccSit -= 2*rDiff;
        
    }
    else {
    
    if (runners == 1 || runners == 2 || runners ==4 )
        unsuccSit -= runners;
    else if (runners == 3)
        unsuccSit -= 1;
    else if (runners == 5)
        unsuccSit -= 3;
    else if (runners == 6)
        unsuccSit -=2;
    else if (runners == 7)
        unsuccSit -=1;
    }
    s4.setSit(unsuccSit, s1.getHomeScore());
    
    double succEq = EquityServer.getDiff(sit,succSit);
    double unsuccEq = EquityServer.getDiff(unsuccSit,sit);
    
    if (s1.isTopofInning()) {
        succEq = -succEq;
        unsuccEq = -unsuccEq;
    }
    
    String analy = "Stealing increase the win percentage by "+String.format("%.2f",   100*succEq)+"%\n";
    analy += "Getting caught stealing reduces the win percentage by "+String.format("%.2f",   100*unsuccEq)+"%\n";
    double threshold = unsuccEq/(unsuccEq + succEq);
    analy += "Attempting to steal makes sense if you will be successful over "+String.format("%.2f",   100*threshold)+"% of the time.";
    analysisBox.setText(analy);
    
}



public int succAdvance(int sit, int hs) {
    int newSit = sit;
    int runners = sit % 10;
    if (runners > 3) { //lead runner scores
        newSit += 6;
        if (!s2.isTopofInning())
            hs++;
        
    }
    else if (runners > 1) // lead runner takes 3rd
        newSit += 2;
    else
        newSit++;
    s3.setSit(newSit, hs);
    return newSit;
    
}
public int unsuccAdvance(int sit, int hs) {
    int newSit = sit + 1000;
    int outs = sit / 1000;
    int runners = sit % 10;
    if (outs % 3 == 2) {  // runner thrown out ends inning
        newSit -= runners;
        int runDiff = (newSit % 1000) - 500;
        newSit = newSit - 2*runDiff;
    }
    else { //runner thrown out does not end inning
        if (runners > 3)
            newSit -=4;
        else if (runners > 1)
            newSit -=2;
        else 
            newSit--;
    }
    
    s4.setSit(newSit, hs);
    s4.setVisible(true);
    return newSit;
    
}

private void processOut1() {
   if (!s1.getOut1().isSelected() )
       s1.getOut2().setSelected(false);
}
private void processOut2() {
 if (s1.getOut2().isSelected() )
       s1.getOut1().setSelected(true);
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea analysisBox;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel scenarioPanel;
    // End of variables declaration//GEN-END:variables
}
